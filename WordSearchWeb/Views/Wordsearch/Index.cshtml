@using WordSearchWeb.Properties
@model WordSearchWeb.Models.WordSearchIndexModel
@{
    ViewBag.Title = "Index";
}
@Scripts.Render("~/bundles/jquery")

<style>
    #altNav {
        font-family: Impact,"Segoe UI",Arial,sans-serif;
        font-size: 30px;
        background-color: #5f5f5f;
        color: white;
        width: 100%;
        height: 60px;
        line-height: 60px;
        left: 0;
        margin: 0 auto;
        padding-left: 20px;
        position: fixed;
        box-shadow: rgba(0, 0, 0, 0.2) 0px 20px 30px;
    }
</style>

<div id="altNav">WordSearch Generator</div>
<h1 style="padding-top:60px;">New WordSearch <small>Enter details</small></h1>

@*<style>
        #hiddenWords {
            border-spacing:4px;
            border-collapse: separate;
        }

        #hiddenWords td:first-child {
            border:1px solid black;
            margin-left:-2px;
        }
    </style>*@

@using (Html.BeginForm("Display", "WordSearch", FormMethod.Post, new { @class = "form-horizontal" }))
{
    <!--  <form class="form-horizontal"> -->
    <div class="form-group">
        <label for="inputTitle" class="col-sm-2 control-label">Title</label>
        <div class="col-sm-6">
            @Html.TextBoxFor(m => m.Title, new { @class = "form-control", placeholder = "Title" })
            @*<input type="text" class="form-control" id="inputTitle" placeholder="Title">*@
        </div>
    </div>
    <div class="form-group">
        <label for="inputDescription" class="col-sm-2 control-label">Description</label>
        <div class="col-sm-6">
            @Html.TextBoxFor(m => m.Description, new { @class = "form-control", placeholder = "Description" })
            @*<input type="text" class="form-control" id="inputDescription" placeholder="Description">*@
        </div>
    </div>
    <div class="form-group">
        <label for="inputRows" class="col-sm-2 control-label">Rows</label>
        <div class="col-sm-6">
            @Html.TextBoxFor(m => m.Rows, new { @class = "form-control", @Value = "10", type = "number", @id = "inputRows", @maxlength = "2" })
            @*<input type="number" class="form-control" id="inputRows" value="10" style="width:3em" maxlength="2">*@
        </div>
    </div>
    <div class="form-group">
        <label for="inputCols" class="col-sm-2 control-label">Columns</label>
        <div class="col-sm-6">
            @Html.TextBoxFor(m => m.Columns, new { @class = "form-control", @Value = "10", type = "number", @id = "inputCols", @maxlength = "2" })
            @*<input type="number" class="form-control" id="inputCols" value="10" min="5" max="20" style="width:3em" maxlength="2">*@
        </div>
    </div>
    <div class="form-group">
        <label for="inputCols" class="col-sm-2 control-label">Hidden Words</label>
        <div class="col-sm-6">
            <!-- Could implement this dynamically, but ok for now -->
            <table id="hiddenWords">
                <tr>
                    @* ToDo - Following could be improved. Remove use of hard coded values for words*@
                    @for (var i = 0; i < 6; i++)
                    {                        
                        <td>@Html.TextBoxFor(m => m.Words[i], new { placeholder = "Word", @class = "form-control", style="width:120px" })</td>
                    }
                </tr>
                <tr>
                    @for (var i = 6; i < 12; i++)
                    {
                        <td>@Html.TextBoxFor(m => m.Words[i], new { placeholder = "Word", @class = "form-control", style = "width:120px" })</td>
                    }
                </tr>
                <tr>
                    @for (var i = 12; i < 18; i++)
                    {
                        <td>@Html.TextBoxFor(m => m.Words[i], new { placeholder = "Word", @class = "form-control", style = "width:120px" })</td>
                    }
                </tr>
            </table>
        </div>
    </div>

    <div class="form-group">
        <div class="col-sm-offset-2 col-sm-10">
            <button id="createWordSearch" type="submit" class="btn btn-primary">Create Word Search</button>
        </div>
    </div>
}
<script>
    function createWordInputs(maxWords) {
                console.log("createWordInputs");
                console.log(maxWords);
            };

$(document).ready(function () {
                console.log("document");
                maximumWords = @Settings.Default.MaximumWords;
                createWordInputs(maximumWords);
            });

</script>

@Scripts.Render("~/scripts/WordSearch/WordSearchElements.js")
@*@Scripts.Render("~/scripts/WordSearch/WordSearch.js")*@